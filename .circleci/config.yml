version: 2.1
defaults: &defaults
  docker:
    - image: circleci/python:2.7-stretch-browsers
install_dependency: &install_dependency
  name: Installation of build and deployment dependencies.
  command: |
    sudo apt install jq
    sudo pip install awscli --upgrade
    sudo pip install docker-compose
    sudo curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest  
    sudo chmod +x /usr/local/bin/ecs-cli
install_deploysuite: &install_deploysuite
  name: Installation of install_deploysuite.
  command: |
    git clone --branch v1.4.14 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
    cp ./../buildscript/master_deploy.sh .
    cp ./../buildscript/buildenv.sh .
    cp ./../buildscript/awsconfiguration.sh .
    cp ./../buildscript/buildproperties.sh .

deploy_steps: &deploy_steps
  - setup_remote_docker
  - run: *install_dependency
  - run: *install_deploysuite
  - deploy:
      name: Running MasterScript.
      command: |
        #./awsconfiguration.sh $DEPLOY_ENV
        ./awsconfiguration.sh $DEPLOY_ENV
        source awsenvconf
        ./buildproperties.sh -e $BUILD_ENV -k grpc
        ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-deployvar
        source buildenvvar
        #./master_deploy.sh -d ECS -e $DEPLOY_ENV -m CLI -t latest -i ${APPNAME}    
        ecs-cli configure --region us-east-1 --cluster $AWS_ECS_CLUSTER
        ecs-cli compose --project-name domain-challenge service up

jobs:
  publish-image:
    docker:
    - image: cimg/aws:2023.01
    environment:
      CODEARTIFACT_ENV: PROD
      ECR_ENV: DEV
      SERVICE_NAME: "domain-challenge"
      OUT_DIR: "buildscripts"
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: "Setup deploy scripts"
        command: |
          git clone -b v1.4 https://github.com/topcoder-platform/tc-deploy-scripts ../${OUT_DIR}
          cp ./../${OUT_DIR}/awsconfiguration.sh .
    - run:
        name: "Authenticate with AWS CodeArtifact and Build Docker Image"
        command: |
          ./awsconfiguration.sh ${CODEARTIFACT_ENV}
          source awsenvconf
          aws codeartifact login --tool npm --repository topcoder-framework --domain topcoder --domain-owner $AWS_ACCOUNT_ID --region $AWS_REGION --namespace @topcoder-framework
          cp ~/.npmrc .
          rm -f awsenvconf
          docker build -t ${SERVICE_NAME}:${CIRCLE_SHA1} .
    - run:
        name: "Set AWS environment variables"
        command: |
          ./awsconfiguration.sh ${ECR_ENV}
    - run:
        name: "Publish docker image"
        command: |
          source awsenvconf
          aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          docker tag ${SERVICE_NAME}:${CIRCLE_SHA1} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${SERVICE_NAME}:${CIRCLE_SHA1}
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${SERVICE_NAME}:${CIRCLE_SHA1}

  deploy-dev:
    <<: *defaults
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "dev"
      APPNAME: "domain-challenge"
    steps: *deploy_steps
       
workflows:
  version: 2
  publish:
    jobs:
    - "publish-image":
        context: "org-global"
        filters:
          branches:
            only:
            - main
    - "deploy-dev":
        context: "org-global"
        filters:
          branches:
            only:
            - dev

